{
  "name": "mouse",
  "version": "0.0.1",
  "description": "A high quality mouse event binding library that treats the mouse like a first class citizen object.",
  "main": "Mouse.js",
  "directories": {
    "example": "example"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Benvie/Mouse.git"
  },
  "keywords": [
    "mouse",
    "mice",
    "mousebind",
    "bind",
    "events",
    "input",
    "handler"
  ],
  "author": {
    "name": "Brandon Benvie"
  },
  "license": "MIT",
  "readme": "# Mouse\n\nMouse providers an interface that represents the mouse itself as an object with state. `window.Mouse` points to the constructor. Only one instance of `Mouse` should exist per `window`. `window.mouse` points to a context's single mouse instance.\n\n# Event Handling\n\n`window.mouse` (just `mouse` from now on) provides existing mouse methods as well as normalizes some and adds new ones.\n\n\n* __down__: mousedown\n* __up__: mouseup\n* __move__: mousemove\n* __click__: click and contextmenu\n* __dblclick__: dbleclick\n* __leave__: Uses mouseout but only fires when the mouse leaves the window entirely\n* __enter__: Uses mouseover but only fires when the mouse enters the window from outside\n* __wheel__: mousewheel and wheel events\n\n# API\nThe following functions are provided to allow management of listeners. Types is a string of type names separated by spaces for multiple events.\n\n* __mouse.on(types, callback)__: add callback as listener for each type in types\n* __mouse.off(types, callback)__: remove callback from listeners for each type in types\n* __mouse.once(types, callback)__: add callback as listener for the first time each type in types fires, then removes it\n* __mouse.emit(evt)__: takes MouseEvent object and runs the event through the callbacks the same as when a native event is received. Type is determined from the event object\n* __new Mouse(view)__: initializes mouse instance for given view. This is done automatically for main window, but this could be run on, for example, an iframe's window to provide a mouse object scope to the iframe.\n\n# Button handling\n\nMouse button state is tracked and `MouseEvent.prototype` is augmented in two ways:\n\n* __buttons__: a getter that returns the buttons as per the W3C spec (only first 3 buttons currently). That is logical combination of the button states. left is 1, middle is 2, right is 4. All through would be 7, etc.\n* __states__: function that interprets the number from buttons into an object like `{ left: true/false, middle: true/false, right: true/false }`",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Benvie/Mouse/issues"
  },
  "_id": "mouse@0.0.1",
  "dist": {
    "shasum": "4183adcda28d2a5e1ab881c60ec05623ee1d1a27"
  },
  "_from": "mouse@",
  "_resolved": "https://registry.npmjs.org/mouse/-/mouse-0.0.1.tgz"
}
